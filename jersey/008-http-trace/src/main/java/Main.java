import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Scanner;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.glassfish.grizzly.http.server.HttpServer;
import org.glassfish.jersey.examples.httptrace.TRACE;
import org.glassfish.jersey.examples.httptrace.TracingResource;
import org.glassfish.jersey.examples.httptrace.Utils;
import org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;
import org.glassfish.jersey.process.Inflector;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.server.model.Resource;
import org.json.JSONException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Main {
	
    public static void main(String[] args) throws URISyntaxException {
		HttpServer server = null;
		try {
			ResourceConfig config = new ResourceConfig( TracingResource.class );
			config.registerResources(manualTrace());
			
			server = GrizzlyHttpServerFactory.createHttpServer(new URI("http://localhost:8080/"), config, true);
			waitForExit();
		} finally {
			if(server != null)
				server.shutdownNow();
		}
	}
    
    private static Resource manualTrace() {
    	Resource.Builder builder = Resource.builder(Utils.ROOT_PATH_PROGRAMMATIC);
    	builder.addMethod(TRACE.NAME).handledBy(new Inflector<ContainerRequestContext, Response>() {

			@Override
			public Response apply(ContainerRequestContext req) {
				if(req == null)
					return Response.noContent().build();
				else {
					try {
						return Response.ok(Utils.toJsonString(req), MediaType.APPLICATION_JSON).build();
					} catch (JSONException | IllegalAccessException | IllegalArgumentException
							| InvocationTargetException e) {
						return Response.serverError().build();
					}
				}
					
			}
		});
		return builder.build();
	}

	private static void waitForExit() {
		System.out.println("type --exit to exit....");
		
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		while(true) {
			if(sc.nextLine().trim().equalsIgnoreCase("--exit"))
				break;
		}
	}
    
    
    
    
}
