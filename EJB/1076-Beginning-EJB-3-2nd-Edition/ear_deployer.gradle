apply from: '../configure.gradle'

repositories {
    jcenter()
}

ext.contextroot = 'page'
ext.welcomePage = null
ext.baseuri = null;

task deploy(dependsOn:'ear') {
  doLast {
     if(!contextroot)
	   throw new GradleException('contextroot not specified')
     if(!baseuri)
	   baseuri = "http://localhost:8080/$contextroot/"
  
    exec {
	  workingDir = ear.destinationDir
      commandLine ASADMIN_EXE,  'deploy', '--force=true', '--contextroot='+contextroot, ear.archiveName
 	}
    println('\nrunning at: '+baseuri)
	handleWelcomePages();
  }
}

def handleUrl(s, open, printurl) {
  def url =  "$baseuri$s"
  if(printurl)
    println "    $url"
  if(open)
    java.awt.Desktop.desktop.browse url.toURI()
}

def handleWelcomePages() {
  if(baseuri && (welcomePage || welcomePage == '')) {
       println 'url(s):'
	   if(welcomePage instanceof Collection)
	     welcomePage.each{handleUrl(it, false, true)}
	   else 
	     handleUrl(welcomePage, false, true)
	}
} 


task run(dependsOn:'waitUndeployRequest') {
  doLast {
  }
}

run.finalizedBy 'undeploy'

task undeploy(type:Exec) {
  workingDir = ear.destinationDir
  commandLine ASADMIN_EXE,  'undeploy', (ear.archiveName - '.ear')
}

task waitUndeployRequest(dependsOn:'deploy') {
  doLast {
    println 'press any key to undeploy...'
	System.in.read()
	/*
    Scanner sc = new Scanner(System.in)
    while(true) {
      def line = sc.nextLine()
	  if(line == 'undeploy')
	    break;
	 println 'invalid input: '+line
    }
	*/
  }
}
